name: Build, Upload to S3, and Deploy Java App to Tomcat

on:
  push:
    branches: [ main ] # Déclenche le déploiement lors d'un push sur la branche main

jobs:
  build-upload-deploy:
    runs-on: ubuntu-latest # Utilise un exécuteur Linux sur GitHub
    env:
      # Rend les secrets disponibles en tant que variables d'environnement pour plus de clarté dans les étapes
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }} # Doit être créé/mis à jour après terraform apply
      S3_PREFIX: ${{ secrets.S3_KEY_PREFIX }} # ex: artifacts/
      EC2_HOST: ${{ secrets.EC2_HOST }}       # Doit être créé/mis à jour après terraform apply
      EC2_USER: ${{ secrets.EC2_USER }}       # ex: ec2-user
      TARGET_DIR: ${{ secrets.TARGET_DIR }}   # ex: /home/ec2-user/app
      WAR_NAME: ${{ secrets.WAR_NAME }}       # ex: application.war
      TOMCAT_WEBAPPS: ${{ secrets.TOMCAT_WEBAPPS }}  # Chemin vers le répertoire webapps de Tomcat

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17 # Ajustez la version si nécessaire pour votre pom.xml
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: Build with Maven
      run: |
        # Modifier le packaging en war dans pom.xml si ce n'est pas déjà fait
        mvn clean package -DskipTests
        ls -la target/

    - name: Find WAR file
      id: find_war
      run: |
        echo "WAR_PATH=$(find target/ -name '*.war' -type f)" >> $GITHUB_OUTPUT
        ls -la ${{ steps.find_war.outputs.WAR_PATH }}

    - name: Check if WAR found
      id: check_war
      run: |
        if [ -z "${{ steps.find_war.outputs.WAR_PATH }}" ]; then
          echo "Error: Built WAR file not found in target directory."
          exit 1
        fi
        echo "Found WAR: ${{ steps.find_war.outputs.WAR_PATH }}"

    - name: Configure AWS Credentials for GitHub Actions
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload WAR to S3
      run: |
        aws s3 cp ${{ steps.find_war.outputs.WAR_PATH }} s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}${{ env.WAR_NAME }}
        echo "Uploaded WAR to s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}${{ env.WAR_NAME }}"

    - name: Setup SSH for Direct Connection
      run: |
        # Créer le répertoire SSH et configurer les permissions
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh

        # Écrire la clé SSH privée dans un fichier
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/private_key
        chmod 600 ~/.ssh/private_key

        # Vérifier que la clé a été correctement écrite
        echo "Clé SSH privée configurée avec $(wc -l ~/.ssh/private_key | awk '{print $1}') lignes"
        head -n 1 ~/.ssh/private_key | grep -q "BEGIN" && echo "La clé commence correctement par BEGIN" || echo "ERREUR: La clé ne commence pas par BEGIN"
        tail -n 1 ~/.ssh/private_key | grep -q "END" && echo "La clé se termine correctement par END" || echo "ERREUR: La clé ne se termine pas par END"

        # Configurer SSH pour ignorer la vérification des hôtes connus et augmenter le timeout
        echo "Host *
          StrictHostKeyChecking no
          UserKnownHostsFile=/dev/null
          IdentityFile ~/.ssh/private_key
          ServerAliveInterval 60
          ServerAliveCountMax 10
          ConnectTimeout 120" > ~/.ssh/config
        chmod 600 ~/.ssh/config

        # Vérifier que l'hôte EC2 est accessible
        echo "Vérification de l'accessibilité de l'hôte EC2 (${{ env.EC2_HOST }})..."
        nc -zv -w 10 ${{ env.EC2_HOST }} 22 || echo "Connexion au port 22 échouée, mais nous allons quand même essayer SSH"

        echo "SSH setup completed"

    - name: Deploy to EC2 and Deploy to Tomcat
      run: |
        echo "Starting deployment via direct SSH..."

        # Afficher les informations de débogage
        echo "Fichier WAR à déployer: ${{ steps.find_war.outputs.WAR_PATH }}"
        echo "Hôte EC2: ${{ env.EC2_HOST }}"
        echo "Utilisateur EC2: ${{ env.EC2_USER }}"
        echo "Répertoire cible: ${{ env.TARGET_DIR }}"
        echo "Nom du WAR: ${{ env.WAR_NAME }}"

        # Utiliser AWS S3 pour transférer le fichier WAR (alternative à SCP)
        echo "Téléversement du fichier WAR vers S3..."
        aws s3 cp ${{ steps.find_war.outputs.WAR_PATH }} s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}${{ env.WAR_NAME }}

        # Essayer d'utiliser SSH avec un timeout plus long
        echo "Tentative de connexion SSH avec timeout augmenté..."
        ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=120 -i ~/.ssh/private_key ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
          # Télécharger le WAR depuis S3
          echo \"Téléchargement du WAR depuis S3...\" &&
          mkdir -p ${{ env.TARGET_DIR }} &&
          cd ${{ env.TARGET_DIR }} &&
          aws s3 cp s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}${{ env.WAR_NAME }} ./${{ env.WAR_NAME }} &&

          # Vérifier que le fichier a bien été téléchargé
          ls -l ${{ env.WAR_NAME }} &&
          echo \"WAR file is ready for deployment: $(pwd)/${{ env.WAR_NAME }}\" &&

          # Arrêter Tomcat avant le déploiement
          echo \"Stopping Tomcat...\" &&
          sudo systemctl stop tomcat &&

          # Déployer le WAR dans le répertoire webapps de Tomcat
          echo \"Deploying WAR to Tomcat...\" &&
          sudo cp ${{ env.WAR_NAME }} ${{ env.TOMCAT_WEBAPPS }}/ &&

          # Définir les permissions appropriées pour que Tomcat puisse accéder au fichier
          sudo chown -R tomcat:tomcat ${{ env.TOMCAT_WEBAPPS }}/${{ env.WAR_NAME }} &&

          # Redémarrer Tomcat
          echo \"Starting Tomcat...\" &&
          sudo systemctl start tomcat &&

          # Vérifier l'état de Tomcat
          echo \"Checking Tomcat status...\" &&
          sudo systemctl status tomcat --no-pager &&

          # Attendre que l'application soit déployée
          echo \"Waiting for application deployment...\" &&
          sleep 10 &&

          # Vérifier les logs de Tomcat
          echo \"Checking Tomcat logs...\" &&
          sudo tail -n 50 $(dirname ${{ env.TOMCAT_WEBAPPS }})/logs/catalina.out
        "

        # Si SSH échoue, utiliser AWS SSM comme alternative
        if [ $? -ne 0 ]; then
          echo "SSH a échoué, tentative de déploiement via AWS SSM..."
          # Obtenir l'ID de l'instance EC2 à partir de son adresse IP
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=ip-address,Values=${{ env.EC2_HOST }}" --query "Reservations[0].Instances[0].InstanceId" --output text)

          if [ -n "$INSTANCE_ID" ]; then
            echo "Instance EC2 trouvée avec l'ID: $INSTANCE_ID"

            # Exécuter un document SSM pour déployer le WAR
            aws ssm send-command \
              --instance-ids $INSTANCE_ID \
              --document-name "AWS-RunShellScript" \
              --parameters commands="[
                \"aws s3 cp s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}${{ env.WAR_NAME }} ${{ env.TARGET_DIR }}/${{ env.WAR_NAME }}\",
                \"sudo systemctl stop tomcat\",
                \"sudo cp ${{ env.TARGET_DIR }}/${{ env.WAR_NAME }} ${{ env.TOMCAT_WEBAPPS }}/\",
                \"sudo chown -R tomcat:tomcat ${{ env.TOMCAT_WEBAPPS }}/${{ env.WAR_NAME }}\",
                \"sudo systemctl start tomcat\"
              ]" \
              --comment "Deploy WAR to Tomcat"

            echo "Commande SSM envoyée avec succès"
          else
            echo "Impossible de trouver l'ID de l'instance EC2 avec l'adresse IP ${{ env.EC2_HOST }}"
            exit 1
          fi
        fi
