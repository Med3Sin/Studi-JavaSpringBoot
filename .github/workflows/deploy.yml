name: Build, Upload to S3, and Deploy Spring Boot App via Systemd

on:
  push:
    branches: [ main ] # Déclenche le déploiement lors d'un push sur la branche main

jobs:
  build-upload-deploy:
    runs-on: ubuntu-latest # Utilise un exécuteur Linux sur GitHub
    env:
      # Rend les secrets disponibles en tant que variables d'environnement pour plus de clarté dans les étapes
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }} # Doit être créé/mis à jour après terraform apply
      S3_PREFIX: ${{ secrets.S3_KEY_PREFIX }} # ex: artifacts/
      EC2_HOST: ${{ secrets.EC2_HOST }}       # Doit être créé/mis à jour après terraform apply
      EC2_USER: ${{ secrets.EC2_USER }}       # ex: ec2-user
      TARGET_DIR: ${{ secrets.TARGET_DIR }}   # ex: /home/ec2-user/app
      JAR_NAME: ${{ secrets.JAR_NAME }}       # ex: hello_java_dev.jar
      SERVICE_NAME: java-app # Nom pour le service systemd

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17 # Ajustez la version si nécessaire pour votre pom.xml
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: Build with Maven
      run: mvn clean install -DskipTests # Construit le JAR, ignore les tests pour un déploiement plus rapide

    - name: Find JAR file
      id: find_jar
      run: echo "JAR_PATH=$(find target -name '*.jar' -type f | head -n 1)" >> $GITHUB_OUTPUT

    - name: Check if JAR found
      id: check_jar
      run: |
        if [ -z "${{ steps.find_jar.outputs.JAR_PATH }}" ]; then
          echo "Error: Built JAR file not found in target directory."
          exit 1
        fi
        echo "Found JAR: ${{ steps.find_jar.outputs.JAR_PATH }}"

    - name: Configure AWS Credentials for GitHub Actions
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload JAR to S3
      run: |
        aws s3 cp ${{ steps.find_jar.outputs.JAR_PATH }} s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}${{ env.JAR_NAME }}
        echo "Uploaded JAR to s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}${{ env.JAR_NAME }}"

    - name: Deploy to EC2 and Restart Service
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        script: |
          # S'assure que le répertoire cible existe
          mkdir -p ${{ env.TARGET_DIR }}
          cd ${{ env.TARGET_DIR }}

          # Télécharge le dernier JAR depuis S3 en utilisant le rôle IAM de l'instance EC2
          echo "Downloading JAR from S3..."
          aws s3 cp s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}${{ env.JAR_NAME }} ${{ env.JAR_NAME }} --region ${{ env.AWS_REGION }}
          if [ $? -ne 0 ]; then
            echo "Error downloading JAR from S3"
            exit 1
          fi
          echo "JAR downloaded."

          # Crée/Met à jour le fichier de service systemd
          # Note : Suppose que Java est installé (ex: via user_data ou AMI)
          # Note : Suppose que Parameter Store est configuré dans l'application Spring Boot pour lire les secrets de la BDD
          echo "Creating/Updating systemd service file..."
          sudo bash -c 'cat > /etc/systemd/system/${{ env.SERVICE_NAME }}.service' << EOF
          [Unit]
          Description=Java Spring Boot Application (${{ env.JAR_NAME }})
          After=network.target # Démarre après que le réseau soit opérationnel
          # Ajoutez 'After=mysql.service' ou similaire si la BDD est locale et doit démarrer en premier

          [Service]
          User=${{ env.EC2_USER }} # Exécute en tant que cet utilisateur
          WorkingDirectory=${{ env.TARGET_DIR }}
          # Ajoutez des variables d'environnement si nécessaire pour votre application
          # Exemple : Environment="SPRING_PROFILES_ACTIVE=production"
          # Exemple : Environment="PARAM_STORE_PATH=/app/${{ env.EC2_HOST }}/db/" # Si l'application a besoin d'une indication de chemin
          ExecStart=/usr/bin/java -jar ${{ env.TARGET_DIR }}/${{ env.JAR_NAME }}
          SuccessExitStatus=143 # Code de sortie standard pour SIGTERM
          Restart=on-failure # Redémarre en cas d'échec
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
          EOF
          echo "Systemd file created/updated."

          # Recharge systemd, active et redémarre le service
          echo "Reloading systemd and restarting service..."
          sudo systemctl daemon-reload
          sudo systemctl enable ${{ env.SERVICE_NAME }}.service
          sudo systemctl restart ${{ env.SERVICE_NAME }}.service
          echo "Service ${{ env.SERVICE_NAME }} restarted."
          # Optionnel : Vérifier le statut
          # sleep 5 # Donne au service le temps de démarrer/échouer
          # sudo systemctl status ${{ env.SERVICE_NAME }}.service --no-pager
